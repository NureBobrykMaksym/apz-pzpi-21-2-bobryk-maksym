1 МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ
1.1 Мета роботи


Розробити програмне забезпечення для IoT пристрою, що є частиною для програмної системи для відслідковування відвідуваності зон локації.


1.2 Моделювання програмної системи


Для того, щоб описати функціональність системи було створено UML діаграму прецедентів (див. А.1). Дана діаграма тримає в собі одну основну роль – роль сенсора.
Сенсор може здійснювати підключення до мережі Інтернет та фіксувати відвідування.
Повний цикл роботи описано нижче (див. А.2):
- Система здійснює під’єднання до Wi-Fi. SSID та пароль Wi-Fi заздалегідь зазначені.
-  Після підключення до мережі Wi-Fi, розпочинається функціонал фіксування руху відвідувачів задля збору інформації стосовно відвідувань.
- Після виявлення руху, PIR-сенсор руху надсилає на сервер запит із фіксованим відвідуванням.


1.3 Взаємодія між частинами системи


Взаємодія програмного забезпечення з іншими частинами системи відбуватиметься через серверну частину, до якої було додано метод надсилання даних, які стосуються відвідування. В якості прикладу взаємодії було створено діаграму взаємодії на основі діаграми активності щодо відправки запиту із даними відвідування(додаток А, рис. А.3 та А.4). На цій діаграмі можна докладніше поглянути на послідовність дій програми та як відбувається взаємодія з серверною частиною.
 
2 ПРОГРАМНА РЕАЛІЗАЦІЯ
2.1 Архітектура програмної системи


Програмне забезпечення для пристрою IoT було розроблено за допомогою мови програмування Python у симуляторі Wokwi із застосуванням архітектури монолітного додатку. Така архітектура передбачає, що всі компоненти програмного забезпечення об'єднані в одну єдину програму. У даному випадку, це означає, що всі функції – підключення до мережі, обробка даних від пасивного інфрачервоного датчика руху, а також взаємодія із сервером – реалізовані в одному додатку.
Однак, з метою підвищення гнучкості та масштабованості програмного забезпечення, монолітний додаток було розбито на окремі модулі. Це дозволило краще організувати код, полегшити його підтримку та тестування, а також спростило додавання нових функцій.
Також, було застосовано мікроконтролер Arduino ESP32, який тримає в собі функціонал підключення до мережі, світлодіод та пасивний інфрачервоний датчик руху (див. А.5).
Для взаємодії із серверною частиною програмної системи використовуються HTTP-запити, які здійснюються за допомогою модуля urequests. За допомогою даного модуля можна здійснювати запити POST до сервера. Розбивка на модулі також дозволило окремо обробляти та тестувати HTTP-запити, що сприяло покращенню загальної структури та функціональності системи.


2.2 Програмна розробка системи


Перед початком написання коду для ІоТ-пристрою було розроблено програмну схему, що описує взаємодію між його компонентами: контролером, сенсором та серверною частиною (див. А.5). В коді було визначено глобальні змінні, що використовуються для зберігання мережевих налаштувань, даних сенсора та зони локації, до якої відноситься сенсор.
Програма бере початок з ініціалізації основного модулю AreaPulseService та виклику його функції main() (див. Б.1, рядки 3-4).


2.2.1 Модуль constants.py


Модуль constants.py тримає константні значення, які використовуються у програмі, такі як налаштування мережі, URL API та id зони локації.


2.2.2 Модуль http_service.py


Модуль http_service.py відповідає за взаємодію з сервером через HTTP запити. Клас HttpService містить функцію для здійснення запиту. Функція register_attendance() виконує POST-запит за допомогою модуля urequests для фіксування відвідування зони локації (див. Б.3, рядки 5-27).


2.2.3 Модуль wifi_service.py


Модуль wifi_service.py відповідає за підключення до мережі Wi-Fi. Модуль Wi-Fi ініціалізується у класі WiFiService, його функція connect_to_wifi() здійснює з’єднання до Wi-Fi мережі, використовуючи задані SSID та пароль в модулі constants.py (див. Б.2, рядки 5-17).

2.2.4 Модуль area_pulse_service.py


Модуль area_pulse_service.py, основний модуль, відповідає за реалізацію основного функціоналу програми. Клас AreaPulseService містить ініціалізацію всіх необхідних зовнішніх сервісів та PIR-сенсору. Функція main() містить в собі під’єднання до мережі, обробку руху виявленого пасивним інфрачервоним датчиком руху та відправку фіксації відвідування на сервер в циклі (див. Б.3, рядки 7-30).


2.3 Висновки


Впродовж цієї лабораторної роботи було розроблено програмне забезпечення для пристрою IoT, що є частиною системи для відслідковування відвідуваності зон локації, описано архітектуру системи, програмну реалізацію, описано фізичну схему, її взаємодію з іншими частинами системи, а також розроблено діаграми, що демонструють роботу коду системи.
 