1 МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ
1.1 Мета роботи


Метою даної лабораторної роботи є розробка клієнтської частини програмної системи, яка є частиною системи для відслідковування відвідуваності зон локації.


1.2 Моделювання програмної системи


Для того, щоб розглянути функціональність клієнтської частини програмної системи було створено Use-Case діаграму для користувача. Усього є одна роль користувача – адміністратор локації, який має змогу додавати, видаляти, редагувати локації, редагувати зони локації, сенсори локації та переглядати відвідуваність як локації в цілому, так і конкретної зони локації.
Функціонал користувача-адміністратора було наведено на UML діаграмі прецедентів (див. А.1). Згідно до діаграми, для початку роботи користувач має авторизуватись у системі, іншими словами або авторизуватись, або зареєструватись. Після успішної авторизації користувач отримує доступ та може переглядати, редагувати, видаляти локації. Додатково, користувач може переглядати, редагувати, видаляти зони локації та їхні сенсори.
Також діяльність користувача та його взаємодія із різними зонами локації передбачає порядок доступу до різних функцій та можливі варіант дій. Наприклад, для того щоб переглянути відвідуваність, користувач спочатку повинен перейти на сторінку певної локації або конкретної зони, до якої відносяться відвідування, знайти відповідну секцію і лише після цього може переглядати інформацію про відвідування.


2 ПРОГРАМНА РЕАЛІЗАЦІЯ КЛІЄНТСЬКОЇ ЧАСТИНИ
2.1 Архітектура програмної системи


Для створення клієнтської частини проекту було використано бібліотеку React.JS, розширення мови програмування JavaScript – TypeScript, а також HTML і CSS для розмітки. Дизайн було розроблено з використанням бібліотеки Chakra UI.
Проект організовано таким чином:
- Components – відображають окремі компоненти системи.
- Routes – відповідають за маршрутизацію.
- Types – містять основні типи даних.
- Api – відповідають за взаємодію з сервером.
- Assets – зберігають статичні файли.
Клієнтська частина спілкується з сервером Nest.JS через HTTP-запити: GET, POST, PUT, DELETE. Для демонстрації структури компонентів системи була створена UML діаграму компонентів (див. А.4).


2.2 Розробка системи
Основний функціонал системи – перегляд інформації про локації, зони локації та відвідувань. Було розроблено UML діаграму станів (див. А.2) та UML діаграму діяльності (див. А.3) для демонстрації взаємодії користувача та системи.


2.2.1 Компонент LocationDetails


Розроблений для відображення та редагування деталей конкретної локації. За допомогою бібліотеки TanstackQuery оголошується метод отримання локації із серверної частини під час ініціалізації компонента. (див. Б.1, рядки 24-49) Отримує ідентифікатор локації з маршруту, перевіряє, чи стосується користувач до локації, завантажує дані про неї та її зони й відвідування за допомогою відповідних сервісів.


2.2.2 Компонент SectorDetails


Розроблений для відображення та редагування деталей конкретної зони локації. За допомогою бібліотеки TanstackQuery оголошується метод отримання зони локації із серверної частини під час ініціалізації компонента (див. Б.2, рядки 26-53).  Отримує ідентифікатор ферми з маршруту, перевіряє, чи локація користувача відноситься до зони локації, завантажує дані про неї та її відвідування за допомогою відповідних сервісів.


2.3 Висновки


Впродовж даної лабораторної роботи було розроблено клієнтську частину програмної системи для контролю відвідування зон локації, описано архітектуру системи, програмну реалізацію, розроблено Use-Case діаграми, діаграми активності та взаємодії.
