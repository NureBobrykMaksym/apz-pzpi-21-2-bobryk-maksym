1 МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ
1.1 Мета роботи


Розробити аркуш завдання та описати  прототип проєкту в форматі Vision & Scope.


1.2 Аналіз предметної області


Проведемо концептуальне моделювання предметної області.
Із використанням програмної системи для відслідковування відвідуваності зон локації користувачі повинні мати можливість створювати, видаляти, редагувати та отримувати статистику, котра стосується відвідуваності локації.
Система матиме тільки одну роль користувачів – адміністратор системи.


1.3 Аналіз інформаційних потреб користувачів


Проаналізуємо інформаційні потреби для адміністратора системи.
Для цього було розроблено UML діаграму прецедентів для адміністратора (див. А.1).
У програмній системі адміністратор матиме можливість:
а) Взаємодіяти із особистим акаунтом:
- Реєструватись у системі
- Входити до системи
- Виходити із системи
- Переглядати інформацію профілю
- Редагувати інформацію профілю
б) Керувати із локаціями:
- Переглядати локації
- Додавати нові локації
- Редагувати вже існуючі локації
- Видаляти локації
в) Взаємодіяти із зонами локації:
- Переглядати зони локації
- Редагувати зони локації
- Отримувати кількість відвідувань для конкретної зони локації
- Видаляти зони локації
- Створювати зони локації
г) Керувати сенсорами:
- Переглядати сенсори
- Додавати нові сенсори
- Редагувати вже існуючі сенсори
- Видаляти сенсори
ґ) Взаємодіяти із аналітикою за тиждень для локації:
- Переглядати аналітику згенеровану штучним інтелектом
- Переглянути зону із мінімальною кількістю відвідуваності
- Переглянути зону із максимальною кількістю відвідуваності
- Отримати відсоткове співвідношення відвідуваності зони локації до загальної кількості відвідуваності
 
2 ПРОЕКТУВАННЯ БАЗИ ДАНИХ
2.1 Проектування бази даних з використанням ER діаграми


Для проєктування структури бази даних для програмної системи було розроблено ER діаграму (див. А.3)
База міститиме 5 таблиць та 18 неключових атрибутів. Далі наведено детальний опис усіх наявних зв’язків між таблицями в базі даних.
Один користувач може мати багато локацій, але одна локація належить лише одному користувачу. Одна локація може мати багато зон, але одна локація належить лише одній локації. Одна зона локації може володіти багатьма відвідуваннями, але відвідування належить тільки до однієї конкретної зони. Одній зоні можуть належати декілька сенсорів, один сенсор належить тільки одній зоні.
 
3 РОЗРОБКА СЕРВЕРНОЇ ЧАСТИНИ
3.1 Архітектура системи


Для початку роботи було розроблено UML діаграму розгортання (див.
А.4). Програмна система буде містити 5 структурних частин:
- Серверна частина
- База даних
- IoT девайс
- Веб застосунок
- Мобільний застосунок
З використанням діаграми було визначено зв’язки між вищезазначеними
структурними частинами, а також протоколи їх взаємодії між собою.
Також для системи було розроблено UML діаграму станів (див. А.2).


3.2 REST специфікація


Користувачі (Users)
- GET /api/user: Отримує поточного користувача.
- POST /api/users: Створює нового користувача.
- POST /api/users/login: Автентифікація користувача за допомогою електронної пошти та пароля.
- PUT /api/users: Оновлює дані користувача.
Локація (Locations)
- POST /api/locations: Створює локації.
- GET /api/locations: Отримує всі локації користувача.
- GET /api/locations/{id}: Отримує локацію за id.
- GET /api/ locations/{id}/attendances: Отримує локації із всіма її відвідуваннями.
- PATCH /api/locations: Оновлює дані про локацію.
- DELETE /api/locations/{id}: Видаляє локації.
Відвідування (Attendances)
- POST /api/attendances: Створює запис відвідування.
- GET /api/attendances: Отримує відвідування.
Аналітика (Analytics)
- POST /api/analytics: Отримує згенерований штучним інтелектом звіт із аналітикою.
Зони (Sectors)
- POST /api/sectors: Створює зони локації.
- GET /api/sectors: Отримує всі зони локації.
- GET /api/sectors/{id}: Отримує зони локації за id.
- PATCH /api/sectors/{id}: Оновлює зони локації за id.
- DELETE /api/sectors/{id}: Видаляє зони локації за id.
Сенсори (Sensors)
- GET /api/sensors{id}: Отримує сенсор за id.
- GET /api/sensors: Отримує всі сенсори.
- POST /api/sensors: Створює сенсор.
- PATCH /api/sensors/{id}: Оновлює сенсор за id.
- DELETE /api/sensors{id}: Видаляє сенсор за id.


3.3 Розробка сервера


У якості технології для розробки серверної частини було використано фреймворк Nest.JS та мову програмування JavaScript із надбудовою TypeScript. У якості середовища було використано редактор коду Visual Studio Code.


3.3.1 База даних та підключення


Для роботи із базою даних було використано PostgreSQL. Для взаємодії із базою даних було використано об’єктно-реляційне відображення TypeORM.
Для створення таблиць в базі даних був використаний підхід code-first: були створені класи сутностей в програмі та використано міграції для підключеної бази даних.


3.3.2 Структура серверу


Вхідною точкою на сервері служать контролери. Після отримання запиту від клієнта контролери передають управління сервісам, які відповідають за бізнес-логіку додатку та взаємодію із базою даних за допомогою TypeORM.


3.3.3 Автентифікація


Під час реєстрації дані користувача записують в базу даних (див. Б.1, рядки 18-47).  Пароль зареєстрованого користувача хешується та зберігає його в захешованому вигляді в базі даних для забезпечення безпеки.
Під час входу в систему виконується перевірка, чи існує користувач в базі даних із введеними користувачем електронною поштою та паролем (див. Б.2 рядки 8-30). У випадку, якщо дані коректні, то створюється JWT-токен та підписує його із використанням секретного ключа (див. Б.1 рядки 67-84).

3.3.4 Управління локаціями


Користувач має можливість створити, відредагувати чи видалити локацію (див. Б.3 рядки 17-35, 75-108, 110-123). Також користувач може переглянути свої локації, детальну інформацію за локацією та список зон локації (див. Б.3 рядки 37-57).


3.3.5 Управління зонами локації


Користувач має можливість створити, відредагувати чи видалити зони локації (див. Б.4 рядки 18-41, 84-113, 115-128). Також користувач може переглянути зони локації, детальну інформацію за локацією та її відвідування (див. Б.4 рядки 43-66).


3.3.6 Управління сенсорами


Користувач має можливість створити, відредагувати чи видалити зони локації (див. Б.5 рядки 17-35, 37-57, 75-108). Також користувач може переглянути всі сенсори (див. Б.5 рядки 37-57).


3.3.7 Фіксування та отримання аналітики відвідуваності


ІоТ пристрій з кожним рухом повз датчик інфрачервоного світла фіксує відвідування зони локації та записує її до бази даних (див. Б.7 рядки 15-32). Користувач має можливість отримати аналітику, згенеровану моделлю штучного інтелекту, на основі відвідуваності зон локації (див. Б.6 рядки 140-215).


3.4 Тестування


Для тестування функціональності сервера було використано Postman. Було виявлено, що функціонал системи працює правильно та стабільно.
